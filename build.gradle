plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.netflix.dgs.codegen" version "5.6.5"
}

group = 'com.techdes'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation('com.netflix.graphql.dgs:graphql-dgs-extended-scalars')
	implementation("com.netflix.graphql.dgs:graphql-dgs-subscriptions-websockets-autoconfigure")
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:4.9.16"
	implementation("com.netflix.graphql.dgs:graphql-dgs-spring-boot-micrometer")
	implementation('com.graphql-java:graphql-java-extended-scalars:19.0')

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.security:spring-security-web'


	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation('com.querydsl:querydsl-apt:5.0.0')
	implementation('com.querydsl:querydsl-jpa')
	runtimeOnly('mysql:mysql-connector-java:8.0.30')
	implementation('org.mapstruct:mapstruct:1.5.3.Final')
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly('org.hibernate:hibernate-jpamodelgen')
	implementation('javax.annotation:javax.annotation-api:1.3.2')
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	annotationProcessor(
			"com.querydsl:querydsl-apt:5.0.0:jpa",
			"org.springframework.boot:spring-boot-starter-data-jpa",
			"org.projectlombok:lombok",
			'org.hibernate:hibernate-jpamodelgen:5.6.0.Final', // FIXED do not upgrade
			"org.mapstruct:mapstruct-processor:1.5.3.Final"
	)

}

generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
	packageName = 'com.archery.packagename' // The package name to use to generate sources
	generateClient = true // Enable generating the type safe query API
}

tasks.named('test') {
	useJUnitPlatform()
}
